# Import Python packages 
import pandas as pd
import cassandra
import re
import os
import glob
import numpy as np
import json
import csv

#### Creating list of filepaths to process original event csv data files

# checking your current working directory
print(os.getcwd())

# Get your current folder and subfolder event data
filepath = os.getcwd() + '/event_data'

# Create a for loop to create a list of files and collect each filepath
for root, dirs, files in os.walk(filepath):
    
# join the file path and roots with the subdirectories using glob
    file_path_list = glob.glob(os.path.join(root,'*'))
    #print(file_path_list)

#### Processing the files to create the data file csv that will be used for Apache Casssandra tables

# initiating an empty list of rows that will be generated from each file
full_data_rows_list = [] 
    
# for every filepath in the file path list 
for f in file_path_list:

# reading csv file 
    with open(f, 'r', encoding = 'utf8', newline='') as csvfile: 
        # creating a csv reader object 
        csvreader = csv.reader(csvfile) 
        next(csvreader)
        
 # extracting each data row one by one and append it        
        for line in csvreader:
            #print(line)
            full_data_rows_list.append(line) 
            
# uncomment the code below if you would like to get total number of rows 
#print(len(full_data_rows_list))
# uncomment the code below if you would like to check to see what the list of event data rows will look like
#print(full_data_rows_list)

# creating a smaller event data csv file called event_datafile_full csv that will be used to insert data into the \
# Apache Cassandra tables
csv.register_dialect('myDialect', quoting=csv.QUOTE_ALL, skipinitialspace=True)

with open('event_datafile_new.csv', 'w', encoding = 'utf8', newline='') as f:
    writer = csv.writer(f, dialect='myDialect')
    writer.writerow(['artist','firstName','gender','itemInSession','lastName','length',\
                'level','location','sessionId','song','userId'])
    for row in full_data_rows_list:
        if (row[0] == ''):
            continue
        writer.writerow((row[0], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[12], row[13], row[16]))


# check the number of rows in your csv file
with open('event_datafile_new.csv', 'r', encoding = 'utf8') as f:
    print(sum(1 for line in f))

# Part II. Complete the Apache Cassandra coding portion of your project. 

## Now you are ready to work with the CSV file titled <font color=red>event_datafile_new.csv</font>, located within the Workspace directory.  
#The event_datafile_new.csv contains the following columns: 
- artist 
- firstName of user
- gender of user
- item number in session
- last name of user
- length of the song
- level (paid or free song)
- location of the user
- sessionId
- song title
- userId


#### Creating a Cluster

# This should make a connection to a Cassandra instance your local machine 
# (127.0.0.1)

from cassandra.cluster import Cluster
cluster = Cluster()

# To establish connection and begin executing queries, need a session
session = cluster.connect()

#creating and setting a keyspace
try:
    session.execute("""CREATE KEYSPACE IF NOT EXISTS udacity WITH REPLICATION = {'class':'SimpleStrategy','replication_factor':1}""")
except Exception as e:
        print(e)

try:
    session.set_keyspace('udacity')
except Exception as e:
    print(e)

### Now we need to create tables to run the following queries. Remember, with Apache Cassandra you model the database tables on the queries you want to run.

## Create queries to ask the following three questions of the data

### 1. Give me the artist, song title and song's length in the music app history that was heard during  sessionId = 338, and itemInSession  = 4


### 2. Give me only the following: name of artist, song (sorted by itemInSession) and user (first and last name) for userid = 10, sessionid = 182
    

### 3. Give me every user name (first and last) in my music app history who listened to the song 'All Hands Against His Own'




### For this first table, session_id and item_in_session were used as the primary key. The query is asking for a specific session_id and item_in_session therefore it is logical that the table be set up to filter on the values in these columns. 

create_table_query = 'CREATE TABLE music_history'
create_table_query = create_table_query + "(session_id int, item_in_session int, artist text, song_title text, song_length double, PRIMARY KEY(session_id, item_in_session))"

try:
    session.execute(create_table_query)
except Exception as e:
    print(e)
                    

file = 'event_datafile_new.csv'

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader) # skip header
    for line in csvreader:

        music_history_insert_query = "INSERT INTO music_history(session_id, item_in_session, song_title, artist, song_length)"
        music_history_insert_query = music_history_insert_query + "VALUES (%s,%s,%s,%s,%s)"
        session.execute(music_history_insert_query, (int(line[8]), int(line[3]), line[0], line[9], float(line[5])))

#validation query
validate = "SELECT * FROM music_history WHERE session_id = 961"

try:
    rows = session.execute(validate)
except Exception as e:
    print(e)

for row in rows:
    print(row.session_id, row.item_in_session, row.artist, row.song_title, row.song_length)

#query1:Give me the artist, song title and song's length in the music app history 
#that was heard during sessionId = 338, and itemInSession = 4

song_by_primary_key = "Select artist, song_title, song_length FROM music_history WHERE session_id = 338 AND item_in_session = 4"

try:
    rows = session.execute(song_by_primary_key)
except Exception as e:
    print(e)
    
for row in rows: 
    print(row.artist, row.song_title, row.song_length)

###The second query asks for song information (artist and song title) and user information (first and last name), in the order in which the user listened to each song within a session, when provided with the user id and sessionid. For this table, the primary key composes of the userid and session id (which is the partition key the query will sort by) and by item in session (which it will cluster by).

create_table_query2 = 'CREATE TABLE music_history2'
create_table_query2 = create_table_query2 + "(userid int, session_id int, item_in_session int, artist text, song_title text, first_name text, last_name text, PRIMARY KEY((userid, session_id), item_in_session))"

try:
    session.execute(create_table_query2)
except Exception as e:
    print(e)

file = 'event_datafile_new.csv'

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader) # skip header
    for line in csvreader:
        music_history2_insert_query = "INSERT INTO music_history2 (userid, session_id, item_in_session, artist, song_title, first_name, last_name)"
        music_history2_insert_query = music_history2_insert_query + "VALUES (%s,%s,%s,%s,%s,%s,%s)"
        session.execute(music_history2_insert_query, (int(line[10]),int(line[8]), int(line[3]), line[0], line[9], line[1], line[4]))

validate2 = "SELECT artist, song_title, first_name, last_name FROM music_history2 WHERE userid = 10 and session_id = 182"

try:
    rows = session.execute(validate2)
except Exception as e:
    print(e)

for row in rows:
    print(row.artist, row.song_title, row.first_name, row.last_name)

info_by_userid_and_session= "Select artist, song_title, first_name, last_name FROM music_history2 WHERE userid = 10 AND session_id = 182"

try:
    rows = session.execute(info_by_userid_and_session)
except Exception as e:
    print(e)
    
for row in rows: 
    print(row.artist, row.song_title, row.first_name, row.last_name)
                    

###The final query asks for every user that listened to a specific song. Therefore, for this table our primary key comprises of the song title and sessionid. Set up this way, the query will filter by song title and cluster by session_id 

create_table3_query = 'CREATE TABLE music_history3'
create_table3_query = create_table3_query + "(song_title text, session_id int, first_name text, last_name text, PRIMARY KEY(song_title, session_id))"

try:
    session.execute(create_table3_query)
except Exception as e:
    print(e)

file = 'event_datafile_new.csv'

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader) # skip header
    for line in csvreader:
        music_history3_insert_query = "INSERT INTO music_history3 (song_title, session_id, first_name, last_name)"
        music_history3_insert_query = music_history3_insert_query + "VALUES (%s,%s,%s,%s)"
        session.execute(music_history3_insert_query, (line[9], int(line[8]), line[1], line[4]))

validate3 = "SELECT first_name, last_name FROM music_history3 WHERE song_title = 'All Hands Against His Own'"

try:
    rows = session.execute(validate3)
except Exception as e:
    print(e)

for row in rows:
    print(row.first_name, row.last_name)

users_by_song = "Select first_name, last_name FROM music_history3 WHERE song_title = 'All Hands Against His Own'"

try:
    rows = session.execute(users_by_song)
except Exception as e:
    print(e)
    
for row in rows: 
    print(row.first_name, row.last_name)
    
                    

### Drop the tables before closing out the sessions

try:
    drop1 = session.execute('DROP TABLE IF EXISTS music_history')
    print('table1 dropped')
except Exception as e:
    print(e)

try:
    drop2 = session.execute('DROP TABLE IF EXISTS music_history2')
    print('table2 dropped')
except Exception as e:
    print(e)
    
try: 
    drop3 = session.execute('DROP TABLE IF EXISTS music_history3')
    print('table3 dropped')
except Exception as e:
    print(e)

### Close the session and cluster connectionÂ¶

session.shutdown()
cluster.shutdown()
    
                    
